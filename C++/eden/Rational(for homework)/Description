Create a class called Rational for performing arithmetic with fractions. Write a program to test your class.
Use integer variables to represent the private data of the class—the numerator(分子） and the denominator（分母）. Provide
a constructor that enables an object of this class to be initialized when it is instantiated. The constructor
should contain default values in case no initializers are provided and should store the fraction in reduced
form. For example, the fraction

    2/4
would be stored in the object as 1 in the numerator and 2 in the denominator. Provide public member functions
that perform each of the following tasks:
a) Adding two Rational numbers. The result should be stored in reduced form.
b) Subtracting two Rational numbers. The result should be stored in reduced form.
c) Multiplying two Rational numbers. The result should be stored in reduced form.
d) Dividing two Rational numbers. The result should be stored in reduced form.
e) Printing Rational numbers in the form a/b where a is the numerator and b is the denominator.
f) Printing Rational numbers in floating-point format.

 

code of Rational.h:

// Rational.h
#ifndef RATIONAL_H
#define RATIONAL_H
class Rational {
 public:
  Rational(int n = 0, int d = 1);  // default constructor
  Rational addition(const Rational &);  // function addition
  Rational subtraction(const Rational &);  // function subtraction
  Rational multiplication(const Rational &);  // function multi.
  Rational division(const Rational &);  // function division
  void printRational (); // print rational format
  void printRationalAsDouble();  // print rational as double format
 private:
  int numerator;  // integer numerator
  int denominator;  // integer denominator
  void reduction();  // utility function
};  // end class Rational

#endif