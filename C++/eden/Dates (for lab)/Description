Modify the Date class to provide a member function nextDay to increment the day by one. The Date object should always remain in a consistent state.  You should pay attention to the following cases:

a)  Incrementing into the next month.

b)  Incrementing into the next year. 

Date.h

// Lab 2: Date.h
#ifndef DATE_H
#define DATE_H

class Date {
    public:
        Date(int = 1, int = 1, int = 2000); // default constructor
        void print(); // print function
        void setDate(int mo, int dy, int yr); // set month, day, year
        void setMonth(int m); // set month
        void setDay(int d); // set day
        void setYear(int y); // set year
        int getMonth(); // get month
        int getDay(); // get day
        int getYear(); // get year
        /* Write a member function prototype for nextDay,
        which will increment the Date by one day */

    private:

        int month; // 1-12

        int day; // 1-31 (except February(leap year), April, June, Sept, Nov)
        int year; // 1900+
        bool leapYear(); // leap year
        int monthDays(); // days in month
}; // end class Date
#endif

 

Date.cpp

#include <iostream>
using std::cout;
using std::endl;

#include "Date.h" // include definition of class Date
Date::Date(int m, int d, int y) {
    setDate(m, d, y); // sets date
} // end Date constructor

void Date::setDate(int mo, int dy, int yr) {
    setMonth(mo); // invokes function setMonth
    setDay(dy); // invokes function setDay
    setYear(yr); // invokes function setYear
} // end function setDate

void Date::setDay(int d) {
    if (month == 2 && leapYear())
        day = (d <= 29 && d >= 1) ? d : 1;
    else
        day = (d <= monthDays() && d >= 1) ? d : 1;
} // end function setDay

void Date::setMonth(int m) { 
    month = m <= 12 && m >= 1 ? m : 1; // sets month
} // end function setMonth


void Date::setYear(int y) {
    year = y >= 1900 ? y : 1900; // sets year
} // end function setYear

int Date::getDay() {
    return day;
} // end function getDay
    int Date::getMonth() {
    return month;
} // end function getMonth

int Date::getYear() {
    return year;
} // end function getYear

void Date::print() {
    cout << month << '-' << day << '-' << year << '\n'; // outputs date
} // end function print

/* Write code to define member function nextDay; make sure to

check if the new day is the start of a new month or a new year */ 

bool Date::leapYear() {

    if (getYear() % 400 == 0 || (getYear() % 4 == 0 && getYear() % 100 != 0))
        return true; // is a leap year
    else
        return false; // is not a leap year
} // end function leapYear

int Date::monthDays() {
    const int days[ 12 ] =
        { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    return getMonth() == 2 && leapYear() ? 29 : days[ getMonth() - 1 ];

} // end function monthDays

 

